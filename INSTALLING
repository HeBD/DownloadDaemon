This guide is seperated in 5 parts:
1: Things that you always have to do
2: Things you have to do if you got this guide in a .tar.gz or .tar.bz2 source package
3: Things you have to do if you are building from SVN
4: Installing the ARM/armel package (a bit more complicated)
5: Doing a user-only installation (which does not require root privileges for execution)

1:	To build DownloadDaemon, you need to have libcurl (libcurl-dev) and libboost-thread (at least version 1.36.0) installed.
	DownloadDaemon only runs on Unix-systems (Linux tested). However, by using Cygwin, a POSIX-emulation environment for Windows,
	you can also run DownloadDaemon under Windows. For instructions on how to do it, check out the DownloadDaemon Wiki.
	To build ddconsole, you don't have to meet any special dependencies, except for a compiler and the c++ standard library
	To build ddclient-wx, you need to have libboost-thread (at least version 1.36.0) and wxWidgets development packages installed
	You also need cmake in order to build any of the packages

2:	Building a package from a source package is pretty simple. Extract the archive (if you read this, this should be done by now)
	and cd to the new folder. now simply run 
	cmake . && make
	sudo make install
	for an in-source-tree build, which should be enough in most cases.
	If you want to build in another place, simply execute cmake <path to extracted package> instead of cmake .
	If you are installing the Daemon, you have to add a user and a group called "downloadd" to restrict permissions
	when executing. Therefore execute these commands:
	sudo addgroup --system downloadd
	sudo adduser --system --ingroup downloadd --home /etc/downloaddaemon downloadd
	sudo chown -R downloadd:downloadd /etc/downloaddaemon
	
	You might also want to start DownloadDaemon automatically when booting up the system. To achieve that, you have to enable
	the init-script placed in /etc/init.d. On debian-based systems, this can be done by executing
	sudo update-rc.d downloadd defaults
		

3:	Building one of the programs from SVN is a bit harder and depends on what you want to build.
	First, create a directory in your svn root where you want to build:
	mkdir build
	cd build
	If you want to build all programs (downloaddaemon, ddclient, ddclient-wx), you simply run
	cmake .. && make
	If you only want to build a single program, you have to run cmake on their source folders, eg:
	cmake ../src/daemon
	or
	cmake ../src/ddconsole
	or
	cmake ../src/ddclient-wx
	
	in any case, to install the program, run
	sudo make install

	To run the Daemon, you have to create a user for it. You can do that by executing this:
	sudo addgroup --system downloadd
	sudo adduser --system --ingroup downloadd --home /etc/downloaddaemon downloadd
	sudo chown -R downloadd:downloadd /etc/downloaddaemon


4:	Since there is no general way to install programs on NAS', the ARM package only contains a packed structure
	which needs to be rebuild on the NAS filesystem. Usually the embedded Linux distribution is installed on a ROM.
	Therefore any changes you make to it will be lost after a reboot. The only good solution I found is not copying
	the data from the archive into the filesystem, but instead just copy it to the hard disk which was put in the NAS.
	Then you write a small shell script that links all the files into the filesystem. This script must then be executed
	after each reboot (If you need some help on installing the Package on your NAS, you can always contact me to get support.
	Just go to our Forums and ask (https://sourceforge.net/projects/downloaddaemon/forums/forum/1007820).
	Another problem is, that many NAS do not have the required libraries (libcurl, libstdc++, libboost_thread) installed.
	To solve this problem, you can Download the downloaddaemon_arm_libs package, which includes the files. They should work for
	most NAS', since many of them run similar glibc versions. However, it does not neccessarily have to work for all of them.
	Be VERY!!! careful when linking the libraries into the filesystem. Only link libraries in that your NAS doesn't have by default.
	If you overwrite existing libraries, this may cause undefined system behaviour (but in most cases can be fixed with a reboot).
	If it doesn't work, you are probably out of luck. The only way would then be cross-compiling them yourself. good luck!
	The shell script will basically look like this or similar:
	#include /bin/bash
	ln -s /mnt/<path to files>/usr/bin/* /usr/bin/*
	ln -s /mnt/<path to files>/etc/downloaddaemon /etc/downloaddaemon
	ln -s /mnt/<path to files>/usr/share/downloaddaemon /usr/share/downloaddaemon
	addgroup downloadd
	adduser -h /etc/downloaddaemon -G downloadd -S -D -s /bin/false downloadd
	chmod -R a+rw /etc/downloaddaemon /<path to the folder where downloads should be placed>
	chown downloadd:downloadd /etc/downloaddaemon/dlist
	DownloadDaemon -d


5:	First, do a normal installation as described above. When done, do the
	following steps:
	1: Copy the configuration files to ~/.downloaddaemon and make them writeable
	   for your user (chmod/chown).
	2: open ~/.downloaddaemon/downloaddaemon.conf and change the variable dlist_file
	   (at the bottom of the file) to ~/.downloaddaemon/dlist
	3: Change the download_folder variable in that file to a writeable folder.
	After that, executing DownloadDaemon as a normal user should be no problem.

	  
