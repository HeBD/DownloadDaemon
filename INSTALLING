This guide is seperated in 5 parts:
1: Things that you always have to do
2: Things you have to do if you got this guide in a .tar.gz or .tar.bz2 source package
3: Things you have to do if you are building from SVN
4: Installing the ARM/armel package (a bit more complicated)
5: Doing a user-only installation (which does not require root privileges for execution)

1:	To build DownloadDaemon, you need to have libcurl (libcurl-dev) and libboost-thread (at least version 1.36.0) installed.
	DownloadDaemon only runs on Unix-systems (Linux tested). However, you can run it under Windows by using Cygwin (you need cygwin
	1.7 or later).
	To build ddconsole, you don't have to meet any special dependencies
	To build ddclient-wx, you need to have libboost-thread (at least version 1.36.0) and wxWidgets development packages installed
	You also need cmake in order to build any of the packages

2:	Building a package from a source package is pretty simple. Extract the archive (if you read this, this should be done by now)
	and cd to the new folder. now simply run 
	cmake . && make
	sudo make install
	for an in-source-tree build, which should be enough in most cases.
	If you want to build in another place, simply execute cmake <path to extracted package> instead of cmake .
	The easyest way to build all programs (server and client) is by changing to the build directory and running
	"cmake ..", then "make" and "make install"(as root). This will install the daemon with all plugins and 
	all available clients (except for the web-based php client, you need to do that manually).

3:	Building one of the programs from SVN is a bit harder and depends on what you want to build.
	First, create a directory in your svn root where you want to build:
	mkdir build
	cd build
	If you want to build all programs (downloaddaemon, ddclient, ddclient-wx), you simply run
	cmake .. && make
	If you only want to build a single program, you have to run cmake on their source folders, eg:
	cmake ../src/daemon
	or
	cmake ../src/ddconsole
	or
	cmake ../src/ddclient-wx
	
	in any case, to install the program, run
	sudo make install

4:	Since there is no general way to install programs on NAS', the ARM package only contains a packed structure
	which needs to be rebuild on the filesystem. Usually the embedded Linux distribution is installed on a ROM.
	Therefore any changes you make to it will be lost after a reboot. The only good solution I found is not copying
	the data from the archive into the filesystem, but instead just copy it to the hard disk which was put in the NAS.
	Then you write a small shell script that links all the files into the filesystem. This script must then be executed
	after each reboot (If you need some help on installing the Package on your NAS, you can always contact me to get support
	(On the sourceforge site, there is a support ticket system).
	Another problem is, that many NAS do not have the required libraries (libcurl, libstdc++, libboost_thread-mt) installed.
	To solve this problem, you can Download the downloaddaemon_arm_libs package, which includes the files. They should work for
	most NAS', since many of them run similar glibc versions. However, it does not neccessarily have to work for all of them.
	Be VERY!!! careful when linking the libraries into the filesystem. Only link libraries in that your NAS doesn't have by default.
	If you overwrite existing libraries, this may cause undefined system behaviour (but can be fixed with a reboot).
	If it doesn't work, you are probably out of luck. The only way would then be cross-compiling them yourself. good luck!
	The shell script will basically look like this:
	#include /bin/bash
	ln -s /mnt/<path to files>/usr/bin/* /usr/bin/*
	ln -s /mnt/<path to files>/etc/downloaddaemon /etc/downloaddaemon
	ln -s /mnt/<path to files>/usr/share/downloaddaemon /usr/share/downloaddaemon

5:	First, do a normal installation as described above. When done, do the
	following steps:
	1: Copy the configuration files to ~/.downloaddaemon and make them writeable
	   for your user (chmod/chown).
	2: open ~/.downloaddaemon/downloaddaemon.conf and change the variable dlist_file
	   (at the bottom of the file) to ~/.downloaddaemon/dlist
	3: Change the download_folder variable in that file to a writeable folder.
	4: change the log-file to a folder where you have write permissions
	After that, executing DownloadDaemon as a normal user should be no problem.

	  
