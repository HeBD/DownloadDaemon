This is a shourt introduction about how to write new Plugins for the downloader to support more hosters.
Generally a plugin can only be written in C++ (C might be supported soon).
Plugins are basically shared libraries which are loaded on runtime to execute some funtions.
Good examples can be found for the rapidshare.com and uploaded.to plugins in src/daemon/plugins.
A plugin always has to be named after its hoster, plus the ".so" file extension for shared libraries.
so for rapidshare.com, you will get a plugin-library called "rapidshare.com.so".
Maybe in a far future, i will include some captcha-decode-helper program or something, but right now, 
this is not offered and you have to look for yourself.
Anyhow, all work should be done by the plugin except for the final step of downloading the file. 
The main program will do that.
Now let's start!
every plugin has to define two functions for the downloader, with the following prototypes:

extern "C" plugin_status plugin_exec(download &dl, CURL* curl_handle, plugin_input &inp, plugin_output &outp)
extern "C" void plugin_getinfo(plugin_input &inp, plugin_output &outp)

The extern "C" is required in order to make execution possible. The plugin will fail if this is missing.
in order to get the needed types from above, you need to include plugin_helpers.h. View that file to see what variables the structs contain.

the first function, plugin_exec is the main plugin function. The parameters are as follows:
download &dl:
	This parameter contains the download object on which the plugin is executed. Usually it is not necessary to do something with it,
	except for using the helper functions defined in plugin_helpers.h, which take that object as a parameter

CURL* curl_handle:
	This is the curl handle that will be used later to download the file. Usually you don't need to do anything with that, except for
	if special options need to be set (e.g. cookies). This handle is already initialized, so just call curl_easy_setopt(...) on that handle
	in order to set options. If you need to download stuff within the plugin (html pages?), do NOT use this handle. Create your own handle
	in this case.

plugin_input &inp:
	This parameter will feed you the parameters specified in the plugin_input struct. If your plugin/hoster supports premium access,
	username/password will be specified in here.

plugin_output &outp:
	This structure contains information the downloader needs from you.
	std::string download_url 	= the final URL to download from. If you are done with your plugin, this needs to be specified.
	std::string download_filename	= Some hosters (e.g. uploaded.to) do not specify their filename in the URL. If it's a simple URL (like asdf.com/hello.rar, 
					= you don't need to fill this out. If it's a special URL (uploaded.to/asdf, filename should be Hello.rar), this needs to
					= be specified.
	bool allows_resumption		= Specifies if the download shoul be resumed if the download on this file has been partly finished before.
					= this is not supported by all hosters.
	bool allows_multiple		= This specifies if the hoster currently supports multiple downloads at the same time. (If this depends on if you are
					= a premium user or not, make your answer dependent.

Currently, premium accounts are not supported, but will be quite soon. Therefore you should consider making your plugin compatible.
When your plugin finished, you may return one of the following values: 
PLUGIN_SUCCESS, PLUGIN_ERROR, PLUGIN_LIMIT_REACHED, PLUGIN_FILE_NOT_FOUND, PLUGIN_CONNECTION_ERROR, PLUGIN_SERVER_OVERLOADED,
PLUGIN_MISSING, PLUGIN_INVALID_HOST, PLUGIN_CONNECTION_LOST, PLUGIN_WRITE_FILE_ERROR

Most of them should be pretty self-explanatory. So this shouldn't be a problem. Statuses for premium accounts will come soon (auth fail, etc).

